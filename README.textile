h1. Overlapping Marker Spiderfier for the Google Maps Android API v2

This code is an attempt to reproduce an excellent code by "jawj":https://github.com/jawj, in Java, intended to be used on *Android*, alongside the excellent "android-maps-extensions":https://code.google.com/p/android-maps-extensions/.
 
For a *thorough* documentation please refer to "jawj's OverlappingMarkerSpiderfier repository":https://github.com/jawj/OverlappingMarkerSpiderfier/blob/master/README.textile.

This code was last updated on *20/02/14*.

The code was written while adding pyrotechnics to the "Blue Card Android app":https://play.google.com/store/apps/details?id=gidutz.soft.bluecard I'm working on.
(At the time of writing, this and many other features are not yet found in the version released on Google Play. Also, it is in Hebrew.)
 
h2. Disclaimer

h3. THIS IS AN ALPHA VERSION

Before proceeding to read \ use the code, please consider the following:

# I have limited experience with Java, Android and the various Maps APIs. Being a __Mechanical__ Engineer I worked quite a lot on MATLAB, but hey - I'm not in Kansas anymore.
# I had absolutely *zero* knowledge in JavaScript (_JS_) and CoffeeScript (_CS_) when undertaking this. It is _very_ likely that *some things got lost in translation*.
# I was following the original flow of the CS (more or less). I pretty much worked blindly without much filtering of what's relevant to Android and what's not so *expect some redundant code*. The upside of this method is, however, that the original comments\documentation apply quite well.
# Any relation between what you are about to see and "_proper_" Java code is purely coincidental. Make sure you're sitting before proceeding.
# The code is absolutely unoptimized in terms of memory\performance.
# Any functionality customizations (such as Polyline properties, radii, etc.) must currently be changed via hardcoding.
# This code was tested in the following conditions:
#* Device: Galaxy Nexus running a CyanogenMod 11 nightly. *Expect the code to require modifications for other devices*.
#* Map clutter: ~500 markers.
#* Largest cluster: 3 items.
# Don't expect a fancy Javadoc just yet.
# You will have to put up with my sarcasm.

Having managed your expectations, this code:
* Works. And is very stable at that - inside are merely 2 try-catch blocks, which I'm not sure are even needed.
* Has huge room for improvement if you're up for it. Any help will be appreciated!

h2. How to Use

# Copy the .java file into your project
# Update the package name.
# Instantiate like so: @oms = new OverlappingMarkerSpiderfier(mMap);@
# That's it!

Notes:
* This class Overrides the map's @OnCameraChangeListener@. If you have your own listener, just move the code from the class' built-in listener to your own.
* The developer is assumed to be working with *android-maps-extensions*.

h3. Expected Functionality
Before & After:
!http://imagizer.imageshack.us/v2/800x600q90/842/7tv8.png!__!http://imagizer.imageshack.us/v2/800x600q90/208/zaun.png!
* Spiderfication only works on @instanceof ClusterMarker@.
* Unspiderfication is performed on zoom level change (hence the aforementioned listener override).

h3. Known Bugs
* Sometimes the Polylines aren't deleted. This is probably due to @unspiderfy@ being unable to return the map to the exact pre-spiderfication state, like it's supposed to.
* Sometimes the cluster is only partially spiderfied. Changing the zoom and trying it again usually fixes it (then breaks it again).

h2. License

This software is released under the "APACHE LICENSE 2.0":http://www.apache.org/licenses/LICENSE-2.0.
